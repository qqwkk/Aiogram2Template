from loguru import logger
from aiogram import executor

from bot.configs.db_pool import create_pool
from bot.configs.databases import postgresql, r
from bot.databases.init import init_db
from bot.handlers.all import register_all_handlers
from bot.configs.bot import dp

async def on_startup(dp):
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    register_all_handlers(dp)
    logger.info("–•–µ–Ω–¥–ª–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    # üîÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞
    await create_pool(
        user=postgresql.user,
        password=postgresql.password,
        database=postgresql.db_name,
        host=postgresql.host,
        port=postgresql.port
    )

    # üîÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    try:
        await init_db()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        raise
    
async def on_shutdown(dp):
    logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    if r:
        r.close()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)